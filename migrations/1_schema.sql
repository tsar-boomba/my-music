CREATE TABLE users (
	username TEXT PRIMARY KEY NOT NULL,
	hashed_pass TEXT NOT NULL,
	admin BOOLEAN NOT NULL DEFAULT FALSE,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE songs (
	id INTEGER PRIMARY KEY NOT NULL,
	title TEXT NOT NULL,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE albums (
	title TEXT PRIMARY KEY NOT NULL,
	link TEXT,
	cover_image_source_id INTEGER,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE artists (
	name TEXT PRIMARY KEY NOT NULL,
	link TEXT,
	image_source_id INTEGER,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE storage_backends (
	name TEXT PRIMARY KEY NOT NULL,
	config TEXT NOT NULL,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sources (
	id INTEGER PRIMARY KEY NOT NULL,
	path TEXT NOT NULL,
	mime_type TEXT NOT NULL,
	storage_backend_name TEXT NOT NULL REFERENCES storage_backends(name) ON DELETE CASCADE,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE tags (
	name TEXT PRIMARY KEY NOT NULL,
	background_color TEXT,
	text_color TEXT,
	border_color TEXT,
	artist_id INTEGER,
	album_id INTEGER,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE songs_to_tags (
	song_id INTEGER REFERENCES songs(id) ON DELETE CASCADE,
	tag_id INTEGER REFERENCES tags(name) ON DELETE CASCADE,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UNIQUE(song_id, tag_id) ON CONFLICT REPLACE
);

CREATE TABLE songs_to_sources (
	song_id INTEGER REFERENCES songs(id) ON DELETE CASCADE,
	source_id INTEGER REFERENCES sources(id) ON DELETE CASCADE,
	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	UNIQUE(song_id, source_id) ON CONFLICT REPLACE
);

CREATE TRIGGER update_users
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
    UPDATE users
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.id;
END;

CREATE TRIGGER update_songs
AFTER UPDATE ON songs
FOR EACH ROW
BEGIN
    UPDATE songs
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.id;
END;

CREATE TRIGGER update_storage_backends
AFTER UPDATE ON storage_backends
FOR EACH ROW
BEGIN
    UPDATE storage_backends
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.id;
END;

CREATE TRIGGER update_sources
AFTER UPDATE ON sources
FOR EACH ROW
BEGIN
    UPDATE sources
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.id;
END;

CREATE TRIGGER update_albums
AFTER UPDATE ON albums
FOR EACH ROW
BEGIN
    UPDATE albums
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.id;
END;

CREATE TRIGGER update_artists
AFTER UPDATE ON artists
FOR EACH ROW
BEGIN
    UPDATE artists
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.id;
END;

CREATE TRIGGER update_tags
AFTER UPDATE ON tags
FOR EACH ROW
BEGIN
    UPDATE tags
    SET updated_at = CURRENT_TIMESTAMP
    WHERE name = OLD.name;
END;
